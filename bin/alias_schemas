#!/usr/bin/env python3

import click
import json
import pathlib
import shutil
import jsonschema


SCHEMA_PATH = pathlib.Path(__file__).parent.parent / "validation-schemas" / "aliases.json"

def get_schema():
    with open(SCHEMA_PATH) as f:
        return json.load(f)


@click.command()
@click.argument(
    'aliases-path',
    type=click.Path(
        dir_okay=False,
        file_okay=True,
        writable=False,
        exists=True,
    ),
    required=True
)
@click.argument(
    'base-dir',
    type=click.Path(
        dir_okay=True,
        file_okay=False,
        writable=True,
        exists=True,
    ),
    required=True
)
def main(aliases_path, base_dir):

    base_dir = pathlib.Path(base_dir)

    with open(aliases_path) as f:
        aliases_parsed = json.load(f)

    jsonschema.validate(instance=aliases_parsed, schema=get_schema())

    for dest_namespace, doctypes in aliases_parsed.items():
        for dest_doctype, alias_info in doctypes.items():
            source_namespace = alias_info['source-namespace']
            source_doctype = alias_info['source-doctype']
            source_dir = base_dir / source_namespace / source_doctype
            dest_dir = base_dir / dest_namespace / dest_doctype

            assert source_dir.exists()

            for source in source_dir.glob('*'):
                fname = source.name.replace(source_doctype, dest_doctype)
                dest = dest_dir / fname

                print(f"Aliasing {source} to {dest}")

                dest.parent.mkdir(parents=True, exist_ok=True)

                if ''.join(dest.suffixes) == '.schema.json':
                    # We must preserve metadata from the source schema.
                    with open(source, 'r') as f:
                        schema_contents = json.load(f)
                    with open(dest, 'r') as f:
                        metadata = json.load(f).get('mozPipelineMetadata', {})
                    schema_contents['mozPipelineMetadata'] = metadata
                    with open(dest, 'w') as f:
                        json.dump(schema_contents, f, ensure_ascii=False, separators=(',', ': '))
                else:
                    shutil.copy(source, dest)


if __name__ == "__main__":
    main()
