[{"fullname": "mozilla_schema_generator", "modulename": "mozilla_schema_generator", "qualname": "", "type": "module", "doc": "<p>Generate schemas for mozilla-pipeline-schemas.</p>\n\n<p><a href=\"https://circleci.com/gh/mozilla/mozilla-schema-generator/tree/main\"><img src=\"https://circleci.com/gh/mozilla/mozilla-schema-generator/tree/main.svg?style=svg\" alt=\"CircleCI\" /></a>\n<a href=\"https://pypi.python.org/pypi/mozilla-schema-generator/\"><img src=\"https://img.shields.io/pypi/v/mozilla-schema-generator.svg\" alt=\"Latest Version\" /></a></p>\n\n<h1 id=\"mozilla-schema-generator\">Mozilla Schema Generator</h1>\n\n<p>A library for generating full representations of Mozilla telemetry pings.</p>\n\n<p>See <a href=\"https://www.github.com/mozilla-services/mozilla-pipeline-schemas\">Mozilla Pipeline Schemas</a>\nfor the more generic structure of pings. This library takes those generic structures and fills in\nall of the probes we expect to see in the appropriate places.</p>\n\n<h2 id=\"telemetry-integration\">Telemetry Integration</h2>\n\n<p>There are two generic ping types we're targeting for this library:</p>\n\n<ol>\n<li><a href=\"http://gecko-docs.mozilla.org.s3.amazonaws.com/toolkit/components/telemetry/telemetry/data/main-ping.html\">The Common Ping Format</a>\nis used for many legacy pings from Firefox Desktop ping, including the \"main\" ping</li>\n<li><a href=\"https://github.com/mozilla/glean_parser\">The Glean Ping Format</a> is the common structure being used for\nall newly instrumented products at Mozilla, including mobile browsers.</li>\n</ol>\n\n<p>This library takes the information for what should be in those pings from the <a href=\"https://www.github.com/mozilla/probe-scraper\">Probe Info Service</a>.</p>\n\n<h2 id=\"data-store-integration\">Data Store Integration</h2>\n\n<p>The primary use of the schemas is for integration with the\n<a href=\"https://www.github.com/mozilla/jsonschema-transpiler\">Schema Transpiler</a>. \nThe schemas that this repository generates can be transpiled into Avro and Bigquery. They define\nthe schema of the Avro and BigQuery tables that the <a href=\"https://www.github.com/mozilla/gcp-ingestion\">BQ Sink</a>\nwrites to.</p>\n\n<h3 id=\"bigquery-limitations-and-splitting\">BigQuery Limitations and Splitting</h3>\n\n<p><a href=\"https://cloud.google.com/bigquery/quotas\">BigQuery has a hard limit of ten thousand columns on any single table</a>. \nThis library can take that limitation into account by splitting schemas into multiple tables,\nalthough so far we have been able to avoid this complication. We retain schema\nsplitting support here as an option to use in the future. The option is currently disabled.</p>\n\n<p>When a schema is split, each\ntable has some common information duplicated in every table, and then a set\nof fields that are unique to that table. The join of these tables gives the full\nset of fields available from the ping.</p>\n\n<p>To decide on a table split, we include the <code>table_group</code> configuration in the configuration\nfile. For example, <code>payload/histograms</code> has <code>table_group: histograms</code>; this indicates that\nthere will be a table outputted with just histograms.</p>\n\n<p>If a single table expands beyond the configured column limit, we move the new fields to the next table.\nFor example, we could have main_histograms_1 and main_histograms_2.</p>\n\n<p>_Note_: Tables are only split if the <code>--split</code> parameter is provided, and this\nis option is not currently used for our production configuration.</p>\n\n<h2 id=\"validation\">Validation</h2>\n\n<p>When we validate pings against a schema in the data pipeline, we use the generic versions\nrather than the versions generated by this repository's machinery. While the schemas produced\nhere are guaranteed to be more correct since they include explicit definitions of every metric and probe,\nwe find in practice there are too many edge cases where a probe is sent with the incorrect type\nand we need to coerce it to the correct type when loading to BigQuery.\nWe also purposely represent some complex types as JSON strings in schemas, relying on the BQ loader\nto coerce objects to string.\nWe could still consider using the generated schemas for validation in the future, but\nadditional work would be required to ensure it does not lead to mass rejection of pings.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<h3 id=\"main-ping\">Main Ping</h3>\n\n<p>Generate the Full Main Ping schema:</p>\n\n<pre><code>mozilla-schema-generator generate-main-ping\n</code></pre>\n\n<p>Generate the Main Ping schema divided among tables (for BigQuery):</p>\n\n<pre><code>mozilla-schema-generator generate-main-ping --split --out-dir main-ping\n</code></pre>\n\n<p>The <code>out-dir</code> parameter will be the namespace for the pings.</p>\n\n<p>To see a full list of options, run <code>mozilla-schema-generator generate-main-ping --help</code>.</p>\n\n<h3 id=\"glean\">Glean</h3>\n\n<p>Generate all Glean ping schemas - one for each application, for each ping\nthat application sends:</p>\n\n<pre><code>mozilla-schema-generator generate-glean-pings\n</code></pre>\n\n<p>Write schemas to a directory:</p>\n\n<pre><code>mozilla-schema-generator generate-glean-pings --out-dir glean-ping\n</code></pre>\n\n<p>To see a full list of options, run <code>mozilla-schema-generator generate-glean-pings --help</code>.</p>\n\n<h2 id=\"configuration-files\">Configuration Files</h2>\n\n<p>Configuration files are by default found in <code>/config</code>. You can also specify your own when running the generator.</p>\n\n<p>Configuration files match certain parts of a ping to certain types of probes or metrics. The nesting\nof the config file matches the ping it is filling in. For example, Glean stores probe types under\nthe <code>metrics</code> key, so the nesting looks like this:</p>\n\n<pre><code>{\n    \"metrics\": {\n        \"string\": {\n            &lt;METRIC_ID&gt;: {...}\n        }\n    }\n}\n</code></pre>\n\n<p>While the generic schema doesn't include information about the specific <code>&lt;METRIC_ID&gt;</code>s being included,\nthe schema-generator does. To include the correct metrics that we would find in that section of the ping,\nwe would organize the <code>config.yaml</code> file like this:</p>\n\n<pre><code>metrics:\n    string:\n        match:\n            type: string\n</code></pre>\n\n<p>The <code>match</code> key indicates that we should fill-in this section of the ping schema with metrics,\nand the <code>type: string</code> makes sure we only put string metrics in there. You can do an exact\nmatch on any field available in the ping info from the <a href=\"https://probeinfo.telemetry.mozilla.org/glean/glean/metrics\">probe-info-service</a>,\nwhich also contains the <a href=\"https://probeinfo.telemetry.mozilla.org/firefox/all/main/all_probes\">Desktop probes</a>.</p>\n\n<p>There are a few additional keywords allowable under any field:</p>\n\n<ul>\n<li><code>contains</code> - e.g. <code>process: contains: main</code>, indicates that the <code>process</code> field is an array\nand it should only match those that include the entry <code>main</code>.</li>\n<li><code>not</code> - e.g. <code>send_in_pings: not: glean_ping_info</code>, indicates that we should match\nany field for <code>send_in_pings</code> _except_ <code>glean_ping_info</code>.</li>\n</ul>\n\n<h3 id=\"table_group-key\"><code>table_group</code> Key</h3>\n\n<p>This specific field is for indicating which table group that section of the ping should be included in when\nsplitting the schema. Currently we do not split any pings. See the section on <a href=\"#bigquery-limitations-and-splitting\">BigQuery\nLimitations and Splitting</a> for more info.</p>\n\n<h2 id=\"allowing-schema-incompatible-changes\">Allowing schema incompatible changes</h2>\n\n<p>On every run of the schema generator, there is a check for incompatible changes\nbetween the previous revision and current generated revision. A schema\nincompatible change includes a removal of a schema or a column, or a change in\nthe type definition of a column.</p>\n\n<p>There are two methods to get around these restrictions. If you are actively\ndeveloping the schema generator and need to introduce a schema incompatible\nchange, set <code>MPS_VALIDATE_BQ=false</code>.</p>\n\n<p>If a schema incompatible change needs to be introduced in production (i.e.\n<code>generated-schemas</code>), then modify the <code>incompatibility-allowlist</code> at the root of\nthe repository. Add documents in the form of\n<code>{namespace}.{doctype}.{docversion}</code>. Globs are allowed. For example, add the\nfollowing line to allow remove schemas under the <code>my_glean_app</code> namespace:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>my_glean_app.*\n</code></pre></div>\n\n<p>Once the commit has gone through successfully, this line should be removed from\nthe document.</p>\n\n<h2 id=\"development-and-testing\">Development and Testing</h2>\n\n<p>Install requirements:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>make install-requirements\n</code></pre></div>\n\n<p>Ensure that the mozilla-pipeline-schemas submodule has been checked out:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>git submodule init\ngit submodule update --remote\n</code></pre></div>\n\n<p>Run tests:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>make <span class=\"nb\">test</span>\n</code></pre></div>\n\n<p>Publish generated schemas to <a href=\"https://github.com/mozilla-services/mozilla-pipeline-schemas/tree/test-generated-schemas\">mozilla-generated-schemas/test-generated-schemas</a>\nrun:</p>\n\n<div class=\"codehilite\"><pre><span></span><code>git fetch origin\n\ngit checkout &lt;branch-to-test&gt;\n\n<span class=\"nb\">export</span> <span class=\"nv\">MPS_SSH_KEY_BASE64</span><span class=\"o\">=</span><span class=\"k\">$(</span>cat ~/.ssh/id_rsa <span class=\"p\">|</span> base64<span class=\"k\">)</span>\n\n<span class=\"c1\"># generate all schemas for current main</span>\ngit checkout main <span class=\"o\">&amp;&amp;</span> git pull make build <span class=\"o\">&amp;&amp;</span> make run\n\n<span class=\"c1\"># generate all schemas with changes and compare with main</span>\ngit checkout &lt;branch-to-test&gt; make build <span class=\"o\">&amp;&amp;</span> make run\n</code></pre></div>\n"}, {"fullname": "mozilla_schema_generator.bhr_ping", "modulename": "mozilla_schema_generator.bhr_ping", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.bhr_ping.BhrPing", "modulename": "mozilla_schema_generator.bhr_ping", "qualname": "BhrPing", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.bhr_ping.BhrPing.__init__", "modulename": "mozilla_schema_generator.bhr_ping", "qualname": "BhrPing.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "kwargs"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.bhr_ping.BhrPing.schema_url", "modulename": "mozilla_schema_generator.bhr_ping", "qualname": "BhrPing.schema_url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.common_ping", "modulename": "mozilla_schema_generator.common_ping", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing.__init__", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "schema_url", "kwargs"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing.MIN_FX_VERSION", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing.MIN_FX_VERSION", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing.env_url", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing.env_url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing.probes_url", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing.probes_url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing.get_schema", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing.get_schema", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing.get_env", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing.get_env", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.common_ping.CommonPing.get_probes", "modulename": "mozilla_schema_generator.common_ping", "qualname": "CommonPing.get_probes", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.config", "modulename": "mozilla_schema_generator.config", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.config.Config", "modulename": "mozilla_schema_generator.config", "qualname": "Config", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.config.Config.__init__", "modulename": "mozilla_schema_generator.config", "qualname": "Config.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "args", "kwargs"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.config.Config.match_key", "modulename": "mozilla_schema_generator.config", "qualname": "Config.match_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.config.Config.get_match_keys", "modulename": "mozilla_schema_generator.config", "qualname": "Config.get_match_keys", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.config.Config.split", "modulename": "mozilla_schema_generator.config", "qualname": "Config.split", "type": "function", "doc": "<p>Split this config into multiple configs.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.config.Config.get_schema_elements", "modulename": "mozilla_schema_generator.config", "qualname": "Config.get_schema_elements", "type": "function", "doc": "<p>Given a schema and set of probes, get a list of probe and\nthe location in the schema where those probes should be\ninputted.</p>\n", "parameters": ["self", "probes"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.generic_ping", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.__init__", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "schema_url", "env_url", "probes_url", "mps_branch"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.probe_info_base_url", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.probe_info_base_url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.default_encoding", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.default_encoding", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.default_max_size", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.default_max_size", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.extra_schema_key", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.extra_schema_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.cache_dir", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.cache_dir", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.get_schema", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.get_schema", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.get_env", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.get_env", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.get_probes", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.get_probes", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.generate_schema", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.generate_schema", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "config", "split", "max_size"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.make_schemas", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.make_schemas", "type": "function", "doc": "<p>Fill in probes based on the config, and keep only the env\nparts of the schema. Throw away everything else.</p>\n", "parameters": ["env", "probes", "config", "split", "max_size"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.generic_ping.GenericPing.make_extra_schema", "modulename": "mozilla_schema_generator.generic_ping", "qualname": "GenericPing.make_extra_schema", "type": "function", "doc": "<p>Given the list of probes and the configuration,\nreturn the schema that has everything but those sections that we\nfilled in already.</p>\n\n<p>TODO: Split the extra schema, when needed (e.g. extra.0.schema.json, extra.1.schema.json)</p>\n", "parameters": ["schema", "probes", "configs"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.glean_ping", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.__init__", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "repo", "kwargs"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.schema_url", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.schema_url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.probes_url_template", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.probes_url_template", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.ping_url_template", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.ping_url_template", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.repos_url", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.repos_url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.dependencies_url_template", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.dependencies_url_template", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.default_dependencies", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.default_dependencies", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.ignore_pings", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.ignore_pings", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.get_dependencies", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.get_dependencies", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.get_probes", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.get_probes", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.get_pings", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.get_pings", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.get_ping_descriptions", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.get_ping_descriptions", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.generate_schema", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.generate_schema", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "config", "split", "generic_schema"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.glean_ping.GleanPing.get_repos", "modulename": "mozilla_schema_generator.glean_ping", "qualname": "GleanPing.get_repos", "type": "function", "doc": "<p>Retrieve metadata for all non-library Glean repositories</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.main_ping", "modulename": "mozilla_schema_generator.main_ping", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.main_ping.MainPing", "modulename": "mozilla_schema_generator.main_ping", "qualname": "MainPing", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.main_ping.MainPing.__init__", "modulename": "mozilla_schema_generator.main_ping", "qualname": "MainPing.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "kwargs"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.main_ping.MainPing.schema_url", "modulename": "mozilla_schema_generator.main_ping", "qualname": "MainPing.schema_url", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher", "modulename": "mozilla_schema_generator.matcher", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.__init__", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.__init__", "type": "function", "doc": "<p>table_group: required, which table that group belongs in\ntype: optional, the type of the metrics</p>\n\n<p>All other fields are matched as exact matches,\nexcept for <code>contains</code> which checks that that value\nis in the associated array.</p>\n", "parameters": ["self", "match_obj", "_type", "table_group"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.table_group_key", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.table_group_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.type_key", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.type_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.contains_key", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.contains_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.not_key", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.not_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.any_key", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.any_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.keywords", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.keywords", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.get_table_group", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.get_table_group", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.matches", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.matches", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "probe"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.matcher.Matcher.clone", "modulename": "mozilla_schema_generator.matcher", "qualname": "Matcher.clone", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "new_type", "new_table_group"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes", "modulename": "mozilla_schema_generator.probes", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.Probe", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.Probe.__init__", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "identifier", "definition"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.Probe.type_key", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.type_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.Probe.name_key", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.name_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.Probe.history_key", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.history_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.Probe.get_type", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.get_type", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.Probe.get_name", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.get_name", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.Probe.get_description", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.get_description", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.Probe.get_last_change", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.get_last_change", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.Probe.get_first_added", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.get_first_added", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.Probe.get_schema", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.get_schema", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "addtlProps"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.Probe.get", "modulename": "mozilla_schema_generator.probes", "qualname": "Probe.get", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "k"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.MainProbe", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.__init__", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "identifier", "definition"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.first_added_key", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.first_added_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.histogram_schema", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.histogram_schema", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.parent_processes", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.parent_processes", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.child_processes", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.child_processes", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.processes_map", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.processes_map", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.get_first_added", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.get_first_added", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.get_last_change", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.get_last_change", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.MainProbe.get_schema", "modulename": "mozilla_schema_generator.probes", "qualname": "MainProbe.get_schema", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "addtlProps"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.GleanProbe", "modulename": "mozilla_schema_generator.probes", "qualname": "GleanProbe", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.GleanProbe.__init__", "modulename": "mozilla_schema_generator.probes", "qualname": "GleanProbe.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "identifier", "definition", "pings"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.GleanProbe.all_pings_keywords", "modulename": "mozilla_schema_generator.probes", "qualname": "GleanProbe.all_pings_keywords", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.GleanProbe.first_added_key", "modulename": "mozilla_schema_generator.probes", "qualname": "GleanProbe.first_added_key", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.probes.GleanProbe.get_first_added", "modulename": "mozilla_schema_generator.probes", "qualname": "GleanProbe.get_first_added", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.GleanProbe.get_last_change", "modulename": "mozilla_schema_generator.probes", "qualname": "GleanProbe.get_last_change", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.probes.GleanProbe.get_schema", "modulename": "mozilla_schema_generator.probes", "qualname": "GleanProbe.get_schema", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "addtlProps"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema", "modulename": "mozilla_schema_generator.schema", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.schema.SchemaException", "modulename": "mozilla_schema_generator.schema", "qualname": "SchemaException", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n"}, {"fullname": "mozilla_schema_generator.schema.SchemaEncoder", "modulename": "mozilla_schema_generator.schema", "qualname": "SchemaEncoder", "type": "class", "doc": "<p>Extensible JSON <a href=\"http://json.org\">http://json.org</a> encoder for Python data structures.</p>\n\n<p>Supports the following objects and types by default:</p>\n\n<p>+-------------------+---------------+\n| Python            | JSON          |\n+===================+===============+\n| dict              | object        |\n+-------------------+---------------+\n| list, tuple       | array         |\n+-------------------+---------------+\n| str               | string        |\n+-------------------+---------------+\n| int, float        | number        |\n+-------------------+---------------+\n| True              | true          |\n+-------------------+---------------+\n| False             | false         |\n+-------------------+---------------+\n| None              | null          |\n+-------------------+---------------+</p>\n\n<p>To extend this to recognize other objects, subclass and implement a\n<code>.default()</code> method with another method that returns a serializable\nobject for <code>o</code> if possible, otherwise it should call the superclass\nimplementation (to raise <code>TypeError</code>).</p>\n"}, {"fullname": "mozilla_schema_generator.schema.SchemaEncoder.default", "modulename": "mozilla_schema_generator.schema", "qualname": "SchemaEncoder.default", "type": "function", "doc": "<p>Implement this method in a subclass such that it returns\na serializable object for <code>o</code>, or calls the base implementation\n(to raise a <code>TypeError</code>).</p>\n\n<p>For example, to support arbitrary iterators, you could\nimplement default like this::</p>\n\n<pre><code>def default(self, o):\n    try:\n        iterable = iter(o)\n    except TypeError:\n        pass\n    else:\n        return list(iterable)\n    # Let the base class default method raise the TypeError\n    return JSONEncoder.default(self, o)\n</code></pre>\n", "parameters": ["self", "obj"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema.Schema", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema", "type": "class", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.schema.Schema.__init__", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "schema"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema.Schema.set_schema_elem", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema.set_schema_elem", "type": "function", "doc": "<p>@param key: The key set\n@param elem: The value to set the key to\n@param propagate: If True, creates objects until it reaches the full key.\n                  If False, and the parent of the key is not in the\n                  schema, then the key will not be added.</p>\n", "parameters": ["self", "key", "elem", "propagate"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema.Schema.get", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema.get", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema.Schema.get_size", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema.get_size", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema.Schema.clone", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema.clone", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema.Schema.delete_group_from_schema", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema.delete_group_from_schema", "type": "function", "doc": "<p>@param key: The key to remove\n@param propagate: If True, then removes any parents of the deleted key\n                  if they are now empty, i.e. there are no other\n                  <code>properties</code>.</p>\n", "parameters": ["self", "key", "propagate"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.schema.Schema.property_exists", "modulename": "mozilla_schema_generator.schema", "qualname": "Schema.property_exists", "type": "function", "doc": "<p>@param key: The key to check for existence</p>\n", "parameters": ["self", "key"], "funcdef": "def"}, {"fullname": "mozilla_schema_generator.utils", "modulename": "mozilla_schema_generator.utils", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "mozilla_schema_generator.utils.prepend_properties", "modulename": "mozilla_schema_generator.utils", "qualname": "prepend_properties", "type": "function", "doc": "<p>Add a \"properties\" before each element of <code>key</code>.\nThis allows the field to be retrieved in a JSON schema</p>\n\n<p>ex:</p>\n\n<pre><code>&gt;&gt; key = (\"hello\", \"world\")\n&gt;&gt; _prepend_propertes(key)\n(\"properties\", \"hello\", \"properties\", \"world)\n</code></pre>\n", "parameters": ["key"], "funcdef": "def"}]